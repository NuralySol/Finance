<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finance Dashboard</title>
    <style>
    body {
    font-family: 'Roboto', sans-serif;
    background: linear-gradient(135deg, #e0f7e0, #c7e7c7);
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    position: relative;
    background-size: 150% 150%;
    animation: fadeBackground 20s ease infinite;
}

    @keyframes fadeBackground {
    0% {
        background-position: 0% 50%;
    }
    50% {
        background-position: 100% 50%;
    }
    100% {
        background-position: 0% 50%;
    }
}

h1 {
    color: #2c3e50;
    margin: 20px 0;
    font-size: 2.5em;
    text-align: center;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.2);
}

.header {
    width: 90%;
    max-width: 1200px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px 0;
    padding: 15px 25px;
    background: linear-gradient(135deg, #ffffff, #f0f2f5);
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: box-shadow 0.3s ease, transform 0.3s ease;
}

.header:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2), 0 4px 8px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.username {
    font-size: 1.2em;
    font-weight: bold;
    color: #2c3e50;
    background: linear-gradient(135deg, #86bb86, #9ac99a);
    padding: 5px 10px;
    border-radius: 5px;
    box-shadow: inset 0 1px 2px rgba(255, 255, 255, 0.6);
    color: #fff;
}

.date-picker {
    display: flex;
    align-items: center;
}

.date-picker button {
    margin: 0 5px;
    padding: 7px 12px;
    font-size: 1em;
    cursor: pointer;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: white;
    transition: background-color 0.3s, box-shadow 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.date-picker button:hover {
    background-color: #0056b3;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

#refreshToday {
    background-color: #28a745;
    color: white;
    font-weight: 600;
    padding: 8px 16px;
    font-size: 1em;
    border-radius: 8px;
    box-shadow: 0 3px 6px rgba(40, 167, 69, 0.3);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

#refreshToday:hover {
    background-color: #218838;
    box-shadow: 0 4px 8px rgba(33, 136, 56, 0.4);
}

.chart-container {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    width: 90%;
    max-width: 1200px;
    margin: 20px 0;
    gap: 20px;
}

.chart {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    flex: 1 1 45%;
    position: relative;
    transition: box-shadow 0.3s ease, transform 0.3s ease;
}

.chart:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
}

.chart h2 {
    color: #333;
    text-align: center;
    margin-bottom: 20px;
    font-size: 1.2em;
    font-weight: 600;
}

.transaction-history {
    width: 90%;
    max-width: 1200px;
    margin-top: auto;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
    overflow: hidden;
    transition: box-shadow 0.3s ease, transform 0.3s ease;
}

.transaction-history:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
}

.transaction-history h2 {
    color: #333;
    margin-bottom: 20px;
    text-align: center;
    font-size: 1.2em;
    font-weight: 600;
}

.transaction-history table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.9em;
    margin-bottom: 20px;
}

.transaction-history th,
.transaction-history td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

.transaction-history th {
    background-color: #f8f9fa;
    color: #333;
    font-weight: bold;
}

.transaction-history tbody tr:hover {
    background-color: #f1f1f1;
}

.pagination {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.pagination a {
    margin: 0 5px;
    padding: 8px 16px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    transition: background-color 0.3s, box-shadow 0.3s ease;
    font-size: 0.9em;
}

.pagination a:hover:not(.disabled) {
    background-color: #0056b3;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.pagination a.disabled {
    background-color: #cccccc;
    pointer-events: none;
}

footer {
    text-align: center;
    margin-top: 20px;
    color: #666;
}

#totalSpentButton {
    background-color: #28a745;
    color: white;
    padding: 12px 24px;
    font-size: 1em;
    border-radius: 5px;
    box-shadow: 0 3px 6px rgba(40, 167, 69, 0.3);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

#totalSpentButton:hover {
    background-color: #218838;
    box-shadow: 0 4px 8px rgba(33, 136, 56, 0.4);
}

#logoutButton {
    background-color: #ffa726;
    color: white;
    border: none;
    border-radius: 50px;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    margin-left: auto;
    margin-right: 200px;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

#logoutButton:hover {
    background-color: #fb8c00;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
}
/* Modal Styles */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4); /* Black background with transparency */
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s ease;
}

.modal-content {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 400px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    animation: slideIn 0.5s ease;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close:hover,
.close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slideIn {
    from { transform: translateY(-10px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}
    </style>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>


<body>
    <div class="header">
        <div class="username-banner">
            <h2>Welcome, <%= username %>!</h2> <!-- Display the username here -->
        </div>
        <div class="date-picker">
            <button id="prevMonth">Previous Month</button>
            <button id="prevDay">Previous Day</button>
            <span id="selectedDate"><%= selectedDate %></span>
            <button id="nextDay">Next Day</button>
            <button id="nextMonth">Next Month</button>
            <button id="refreshToday">Refresh to Current Day</button> <!-- New button added -->
            <!-- Modal Structure -->
<div id="errorModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <p id="errorMessage">You cannot select a future date!</p>
    </div>
</div>
        </div>
        <div class="date" id="currentDate"></div>
    </div>
    <h1>Finance Dashboard</h1>
    
    <button id="logoutButton" onclick="handleLogout()">Log Out</button>
    <div id="dateRangeDisplay" style="font-size: 1.2em; color: #666; margin-bottom: 20px; text-align: center;"></div>

    <div class="chart-container">
        <div class="chart">
            <h2>Expenses by Category (Pie Chart)</h2>
            <div id="pieChart" style="height: 550px;"></div>
            <button id="toggleRefundsButton" style="margin-top: 10px; padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Hide Refunds
            </button>
            <button id="totalSpentButton">Show Total Spent</button>
        </div>

        <div class="chart">
            <h2>Expenses by Place of Spending (Bar Chart)</h2>
            <div id="barChart" style="height: 550px;"></div>
            <button id="sortButton" style="margin-top: 10px; padding: 8px 15px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Sort: Highest to Lowest
            </button>
            <button id="sortDateButton" style="margin-top: 10px; padding: 8px 15px; background-color: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer;">
                Sort by Date: Newest to Oldest
            </button>
        </div>
    </div>

    <div class="transaction-history">
        <h2>Transaction History</h2>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Type</th>
                    <th>Amount $</th>
                </tr>
            </thead>
            <tbody>
                <% transactions.forEach(function(transaction) { %>
                    <tr style="background-color: <%= transaction.amount < 0 ? '#f8d7da' : 'transparent' %>;">
                        <td><%= new Date(transaction.date).toLocaleDateString('en-US') %></td>
                        <td><%= transaction.name %></td>
                        <td><%= transaction.amount > 0 ? 'Expenditure' : 'Refund' %></td>
                        <td><%= transaction.amount.toFixed(2) %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="/dashboard?date=<%= selectedDate %>&page=<%= currentPage - 1 %>">Previous</a>
            <% } else { %>
                <span class="disabled">Previous</span>
            <% } %>
    
            <% if (currentPage < totalPages) { %>
                <a href="/dashboard?date=<%= selectedDate %>&page=<%= currentPage + 1 %>">Next</a>
            <% } else { %>
                <span class="disabled">Next</span>
            <% } %>
        </div>
    </div>

    <footer>
        &copy; 2024 Finance Dashboard Nuraly Soltonbekov
    </footer>

    <script>
        // Log the transactions to ensure data is correctly passed
const transactions = <%- JSON.stringify(transactions) %>;
console.log('Transactions:', transactions);

// Check if Plotly is loaded
console.log('Plotly:', Plotly);

// Function to update the current date display
function updateDate() {
    const dateElement = document.getElementById('currentDate');
    const now = new Date();
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    dateElement.textContent = now.toLocaleDateString('en-US', options);
}
updateDate();

// Calculate the date range from the transactions
function calculateDateRange(transactions) {
    if (!transactions || transactions.length === 0) {
        return 'No transactions available';
    }

    const dates = transactions.map(txn => new Date(txn.date));
    const minDate = new Date(Math.min(...dates));
    const maxDate = new Date(Math.max(...dates));

    const formatDate = (date) => date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });

    return `${formatDate(minDate)} - ${formatDate(maxDate)}`;
}

// Display the date range in the dateRangeDisplay div
function updateDateRangeDisplay() {
    const dateRange = calculateDateRange(transactions);
    const dateRangeDisplayElement = document.getElementById('dateRangeDisplay');
    dateRangeDisplayElement.textContent = `Date Range: ${dateRange}`;
}

// Call the function to display the date range when the page loads
updateDateRangeDisplay();

// Function to generate a random muted color for expenditures
function getRandomMutedColor() {
    const hue = Math.floor(Math.random() * 360); // Random hue between 0 and 360
    const saturation = Math.floor(Math.random() * 30) + 40; // Saturation between 40% and 70%
    const lightness = Math.floor(Math.random() * 30) + 30; // Lightness between 30% and 60%
    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;
}

// Function to generate a color based on whether the transaction is a refund
function getColorForTransaction(amount) {
    return amount < 0 ? '#f8d7da' : getRandomMutedColor(); // Red for refunds, random muted color for expenditures
}

// Function to generate a border color based on whether the transaction is a refund
function getBorderColorForTransaction(amount) {
    return amount < 0 ? 'yellow' : 'transparent'; // Yellow border for refunds, no border for expenditures
}

// Function to process transactions for the pie chart
function processTransactionsForPieChart(transactions, showRefunds = true) {
    return transactions
        .filter(txn => showRefunds || txn.amount >= 0) // Filter refunds based on the toggle state
        .map(txn => ({
            label: txn.name,
            value: Math.abs(txn.amount),
            color: getColorForTransaction(txn.amount),
            borderColor: getBorderColorForTransaction(txn.amount)
        }));
}

// Function to render the pie chart
function renderPieChart(transactions, showRefunds) {
    const pieData = processTransactionsForPieChart(transactions, showRefunds);

    const pieChartData = [{
        labels: pieData.map(data => data.label),
        values: pieData.map(data => data.value),
        type: 'pie',
        marker: {
            colors: pieData.map(data => data.color),
            line: {
                color: pieData.map(data => data.borderColor),
                width: 2 // Width of the border around refunds
            }
        }
    }];

    const pieLayout = {
        title: 'Amount Spent by Percentage',
        margin: { t: 70, b: 30, l: 30, r: 30 },
    };

    Plotly.newPlot('pieChart', pieChartData, pieLayout);
}

// Initial rendering of the pie chart with refunds
let showRefunds = true;
renderPieChart(transactions, showRefunds);

// Toggle button functionality
document.getElementById('toggleRefundsButton').addEventListener('click', function() {
    showRefunds = !showRefunds;
    renderPieChart(transactions, showRefunds);
    this.textContent = showRefunds ? 'Hide Refunds' : 'Show Refunds';
});

// Initial data preparation for the bar chart
let spendingByPlace = transactions.reduce((acc, txn) => {
    acc[txn.name] = (acc[txn.name] || 0) + txn.amount;
    return acc;
}, {});

let sorted = false;

// Function to update the bar chart based on sorting (highest to lowest, or by date)
function updateBarChart(sortedKeys, sortedValues) {
    const colors = sortedKeys.map(() => getRandomMutedColor());

    const barData = [{
        x: sortedKeys,
        y: sortedValues,
        type: 'bar',
        marker: {
            color: colors,
            line: {
                width: 1,
                color: 'black'
            }
        }
    }];

    const barLayout = {
        title: 'Amount Spent by Place',
        xaxis: { title: 'Place of Spending' },
        yaxis: { title: 'Total Amount ($)' },
        margin: { t: 70, b: 120, l: 50, r: 40 },
    };

    Plotly.newPlot('barChart', barData, barLayout);
}

// Initial plot of the bar chart
updateBarChart(Object.keys(spendingByPlace), Object.values(spendingByPlace));

// Event listener for sorting by highest to lowest
document.getElementById('sortButton').addEventListener('click', () => {
    sorted = !sorted;

    const sortedKeys = Object.keys(spendingByPlace).sort((a, b) => {
        if (sorted) {
            return spendingByPlace[a] - spendingByPlace[b]; // Ascending order
        } else {
            return spendingByPlace[b] - spendingByPlace[a]; // Descending order
        }
    });

    const sortedValues = sortedKeys.map(key => spendingByPlace[key]);

    updateBarChart(sortedKeys, sortedValues);
    document.getElementById('sortButton').textContent = sorted ? 'Sort: Lowest to Highest' : 'Sort: Highest to Lowest';
});

// Function to calculate the total amount spent
function calculateTotalSpent(transactions) {
            return transactions.reduce((total, transaction) => total + transaction.amount, 0);
        }

        // Update the 'totalSpentButton' with the total amount spent
        const totalSpentButton = document.getElementById('totalSpentButton');
        const totalSpent = calculateTotalSpent(transactions);
        totalSpentButton.textContent = `Total Spent: $${totalSpent.toFixed(2)}`;

// Event listener for sorting by date (newest to oldest)
let sortByDateDescending = true;

document.getElementById('sortDateButton').addEventListener('click', () => {
    sortByDateDescending = !sortByDateDescending;

    const sortedTransactions = transactions.slice().sort((a, b) => {
        return sortByDateDescending
            ? new Date(b.date) - new Date(a.date)
            : new Date(a.date) - new Date(b.date);
    });

    spendingByPlace = sortedTransactions.reduce((acc, txn) => {
        acc[txn.name] = (acc[txn.name] || 0) + txn.amount;
        return acc;
    }, {});

    const sortedKeys = Object.keys(spendingByPlace);
    const sortedValues = sortedKeys.map(key => spendingByPlace[key]);

    updateBarChart(sortedKeys, sortedValues);
    document.getElementById('sortDateButton').textContent = sortByDateDescending
        ? 'Sort by Date: Newest to Oldest'
        : 'Sort by Date: Oldest to Newest';
});

// Function to format a date into YYYY-MM-DD format
function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Get the modal elements
var modal = document.getElementById("errorModal");
var span = document.getElementsByClassName("close")[0];

// Function to show the error modal
function showErrorModal(message) {
    document.getElementById("errorMessage").textContent = message;
    modal.style.display = "flex";
}

// Close the modal when the user clicks on <span> (x)
span.onclick = function() {
    modal.style.display = "none";
}

// Close the modal when the user clicks anywhere outside of it
window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = "none";
    }
}

// Date navigation logic
const prevDayButton = document.getElementById('prevDay');
const nextDayButton = document.getElementById('nextDay');
const prevMonthButton = document.getElementById('prevMonth');
const nextMonthButton = document.getElementById('nextMonth');
const refreshTodayButton = document.getElementById('refreshToday');
const selectedDateElement = document.getElementById('selectedDate');

function navigateDate(incrementType, incrementValue) {
    let selectedDate = new Date(selectedDateElement.textContent);

    if (incrementType === 'day') {
        selectedDate.setDate(selectedDate.getDate() + incrementValue);
    } else if (incrementType === 'month') {
        selectedDate.setMonth(selectedDate.getMonth() + incrementValue);
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0); // Set today to midnight for accurate comparison

    if (selectedDate > today) {
        showErrorModal("You cannot select a future date!");
        return;
    }

    const formattedDate = formatDate(selectedDate);
    selectedDateElement.textContent = formattedDate; // Update the displayed date

    window.location.href = `/dashboard?date=${formattedDate}`;
}

prevDayButton.addEventListener('click', () => navigateDate('day', -1));
nextDayButton.addEventListener('click', () => navigateDate('day', 1));
prevMonthButton.addEventListener('click', () => navigateDate('month', -1));
nextMonthButton.addEventListener('click', () => navigateDate('month', 1));

// Refresh to current day logic
refreshTodayButton.addEventListener('click', () => {
    const today = new Date();
    const formattedDate = formatDate(today);
    selectedDateElement.textContent = formattedDate; // Update the displayed date
    window.location.href = `/dashboard?date=${formattedDate}`;
});

// Handle log out functionality
function handleLogout() {
    fetch('/logout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (response.ok) {
            window.location.href = '/login'; // Redirect to login page
        } else {
            console.error('Failed to log out');
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
    </script>
</body>

</html>
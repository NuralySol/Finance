<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Finance Dashboard</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f0f2f5;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            position: relative;
        }

        h1 {
            color: #333;
            margin: 20px 0;
            font-size: 2em;
            text-align: center;
        }

        .header {
            width: 90%;
            max-width: 1200px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
            background-color: #fff;
            padding: 10px 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .username {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }

        .date-picker {
            display: flex;
            align-items: center;
        }

        .date-picker button {
            margin: 0 5px;
            padding: 5px 10px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            background-color: #007bff;
            color: white;
            transition: background-color 0.3s;
        }

        .date-picker button:hover {
            background-color: #0056b3;
        }

        .chart-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            width: 90%;
            max-width: 1200px;
            margin: 20px 0;
            gap: 20px;
        }

        .chart {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            flex: 1 1 45%;
            position: relative;
        }

        .chart h2 {
            color: #333;
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.2em;
        }

        .transaction-history {
            width: 90%;
            max-width: 1200px;
            margin-top: auto;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .transaction-history h2 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.2em;
        }

        .transaction-history table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.9em;
            margin-bottom: 20px;
        }

        .transaction-history th,
        .transaction-history td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .transaction-history th {
            background-color: #f8f9fa;
            color: #333;
            font-weight: bold;
        }

        .transaction-history tbody tr:hover {
            background-color: #f1f1f1;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .pagination a {
            margin: 0 5px;
            padding: 8px 16px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
            font-size: 0.9em;
        }

        .pagination a:hover:not(.disabled) {
            background-color: #0056b3;
        }

        .pagination a.disabled {
            background-color: #cccccc;
            pointer-events: none;
        }

        footer {
            text-align: center;
            margin-top: 20px;
            color: #666;
        }
    </style>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>


<body>
    <div class="header">
        <div class="username">Welcome, nuraly!</div>
        <div class="date-picker">
            <button id="prevMonth">Previous Month</button>
            <button id="prevDay">Previous Day</button>
            <span id="selectedDate"><%= selectedDate %></span>
            <button id="nextDay">Next Day</button>
            <button id="nextMonth">Next Month</button>
        </div>
        <div class="date" id="currentDate"></div>
    </div>
    <h1>Finance Dashboard</h1>

    <div class="chart-container">
        <div class="chart">
            <h2>Expenses by Category (Pie Chart)</h2>
            <div id="pieChart" style="height: 400px;"></div>
        </div>

        <div class="chart">
            <h2>Expenses by Place of Spending (Bar Chart)</h2>
            <div id="barChart" style="height: 450px;"></div>
        </div>
    </div>

    <div class="transaction-history">
        <h2>Transaction History</h2>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th></th>
                    <th>Amount $</th>
                </tr>
            </thead>
            <tbody>
                <% transactions.forEach(function(transaction) { %>
                    <tr>
                        <td><%= new Date(transaction.date).toLocaleDateString('en-US') %></td>
                        <td><%= transaction.name %></td>
                        <td><%= transaction.category %></td>
                        <td><%= transaction.amount.toFixed(2) %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="/dashboard?date=<%= selectedDate %>&page=<%= currentPage - 1 %>">Previous</a>
            <% } else { %>
                <span class="disabled">Previous</span>
            <% } %>

            <% if (currentPage < totalPages) { %>
                <a href="/dashboard?date=<%= selectedDate %>&page=<%= currentPage + 1 %>">Next</a>
            <% } else { %>
                <span class="disabled">Next</span>
            <% } %>
        </div>
    </div>

    <footer>
        &copy; 2024 Finance Dashboard Nuraly Soltonbekov
    </footer>

    <script>
        // Log the transactions to ensure data is correctly passed
        const transactions = <%- JSON.stringify(transactions) %>;
        console.log('Transactions:', transactions);

        // Check if Plotly is loaded
        console.log('Plotly:', Plotly);

        // Function to update the current date display
        function updateDate() {
            const dateElement = document.getElementById('currentDate');
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            dateElement.textContent = now.toLocaleDateString('en-US', options);
        }
        updateDate();

        // Prepare data for Pie Chart
        const pieData = [{
            labels: transactions.map(txn => txn.name),
            values: transactions.map(txn => Math.abs(txn.amount)), // Using absolute values for spending amounts
            type: 'pie',
            marker: {
                colors: transactions.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.7)`)
            }
        }];

        const pieLayout = {
            title: 'Amount Spent by Place',
            margin: { t: 30, b: 30, l: 30, r: 30 },
        };

        Plotly.newPlot('pieChart', pieData, pieLayout);

        // Prepare data for Bar Chart
        const spendingByPlace = transactions.reduce((acc, txn) => {
            acc[txn.name] = (acc[txn.name] || 0) + txn.amount;
            return acc;
        }, {});

        const barData = [{
            x: Object.keys(spendingByPlace),
            y: Object.values(spendingByPlace),
            type: 'bar',
            marker: {
                color: 'rgba(55, 128, 191, 0.7)',
                borderColor: 'rgba(55, 128, 191, 1)'
            }
        }];

        const barLayout = {
            title: 'Amount Spent by Place',
            xaxis: { title: 'Place of Spending' },
            yaxis: { title: 'Total Amount ($)' },
            margin: { t: 30, b: 130, l: 55, r: 70 },
        };

        Plotly.newPlot('barChart', barData, barLayout);

        // Function to format a date into YYYY-MM-DD format
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        // Date navigation logic with error handling
        const prevDayButton = document.getElementById('prevDay');
        const nextDayButton = document.getElementById('nextDay');
        const prevMonthButton = document.getElementById('prevMonth');
        const nextMonthButton = document.getElementById('nextMonth');
        const selectedDateElement = document.getElementById('selectedDate');

        function navigateDate(incrementType, incrementValue) {
            let selectedDate = new Date(selectedDateElement.textContent);

            if (incrementType === 'day') {
                selectedDate.setDate(selectedDate.getDate() + incrementValue);
            } else if (incrementType === 'month') {
                selectedDate.setMonth(selectedDate.getMonth() + incrementValue);
            }

            const today = new Date();
            today.setHours(0, 0, 0, 0); // Set today to midnight for accurate comparison

            if (selectedDate > today) {
                alert("You cannot select a future date!");
                return;
            }

            const formattedDate = formatDate(selectedDate);
            window.location.href = `/dashboard?date=${formattedDate}`;
        }

        prevDayButton.addEventListener('click', () => navigateDate('day', -1));
        nextDayButton.addEventListener('click', () => navigateDate('day', 1));
        prevMonthButton.addEventListener('click', () => navigateDate('month', -1));
        nextMonthButton.addEventListener('click', () => navigateDate('month', 1));
    </script>
</body>

</html>